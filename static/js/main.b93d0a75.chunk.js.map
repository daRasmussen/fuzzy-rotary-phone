{"version":3,"sources":["Calculator/Calculator.js","Formula/Formula.js","Display/Display.js","Buttons/Buttons.js","Author/Author.js","reportWebVitals.js","index.js"],"names":["Calculator","props","state","currentValue","previousValue","formula","initialize","bind","decimal","maxWarn","operators","handleDecimal","evaluate","this","c","p","limitText","setState","setTimeout","e","f","evaluated","limitInt","isOperator","isDecimal","includes","incoming","target","value","length","test","slice","_eval","endsWithOperator","endsWithNegativeSign","decimalOperator","match","replace","ans","Math","round","eval","toString","id","className","React","Component","Formula","Display","type","getCurrentValue","onChange","Buttons","onClick","join","Author","href","tag","alias","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b93d0a75.chunk.js","sourcesContent":["import './scss/Calculator.scss';\nimport React from 'react';\nimport Formula from \"../Formula/Formula\";\nimport Display from \"../Display/Display\";\nimport Buttons from '../Buttons/Buttons';\nimport Author from '../Author/Author';\n\nclass Calculator extends React.Component {\n    static id = \"Calculator\";\n    static className = \"app\";\n    static test = \"This is a Calculator\";\n    static limitText = 'Limit Met!';\n    static limitInt = 21;\n    static isOperator = /[x/+‑]/;\n    static isDecimal = /([^.0-9]0|^0)$/;\n    static endsWithOperator = /[x+‑/]$/;\n    static endsWithNegativeSign = /\\d[x/+‑]‑$/;\n    static decimalOperator = /(-?\\d+\\.?\\d*)$/;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentValue: '0',\n            previousValue: '0',\n            formula: '0'\n        }\n        this.initialize = this.initialize.bind(this);\n        this.decimal = this.decimal.bind(this);\n        this.maxWarn = this.maxWarn.bind(this);\n        this.operators = this.operators.bind(this);\n        this.handleDecimal = this.handleDecimal.bind(this);\n        this.evaluate = this.evaluate.bind(this);\n    }\n\n    maxWarn() {\n        const {state: {currentValue: c, previousValue: p}} = this;\n        const {limitText} = Calculator;\n        this.setState({\n            currentValue: limitText,\n            previousValue: c\n        });\n        setTimeout(() => this.setState({\n            currentValue: p\n        }), 1000)\n    }\n\n    decimal(e) {\n        const {state: {formula: f, currentValue: c, evaluated}} = this;\n        const {limitInt, isOperator, isDecimal, limitText} = Calculator;\n        if (c.includes(limitText) === false) {\n            const {target: {value: incoming}} = e;\n            const {length} = incoming;\n            this.setState({ evaluated: false})\n            if (length > limitInt) {\n                this.maxWarn();\n            } else if (evaluated) {\n                this.setState({\n                    currentValue: incoming,\n                    formula: incoming !== '0' ? incoming : ''\n                });\n            } else {\n                this.setState({\n                    currentValue: c === '0' || isOperator.test(c)\n                        ? incoming\n                        : c + incoming,\n                    formula:\n                        c === '0' && incoming === '0'\n                            ? f === ''\n                            ? incoming\n                            : f\n                            : isDecimal.test(f)\n                            ? f.slice(0, -1) + incoming\n                            : f + incoming\n                });\n            }\n        }\n    }\n\n    operators(e) {\n        const {state: {currentValue: c, formula: f, previousValue: p, evaluated: _eval }} = this;\n        const { endsWithOperator, endsWithNegativeSign, limitText } = Calculator;\n        if (c.includes(limitText) === false) {\n            const {target: {value: incoming}} = e;\n            this.setState({\n                currentValue: incoming,\n                evaluated: false\n            });\n            if(_eval) {\n                this.setState( { formula: p + incoming })\n            } else if (!endsWithOperator.test(f)) {\n                this.setState({\n                    previousValue: f,\n                    formula: f + incoming\n                });\n            } else if (!endsWithNegativeSign.test(f)) {\n                this.setState({\n                    formula:\n                        (endsWithNegativeSign.test(f + incoming) ? p : f) + incoming\n                });\n            } else if (incoming !== '-') {\n                this.setState({\n                    formula: f + incoming\n                })\n            }\n        }\n    }\n\n    initialize() {\n        this.setState({\n            currentValue: '0',\n            previousValue: '0',\n            formula: '',\n            evaluated: false\n        })\n    }\n\n    handleDecimal() {\n        const { decimalOperator, endsWithOperator } = Calculator;\n        const { state: { currentValue: c, formula: f, evaluated: _eval }} = this;\n        if(_eval === true ) {\n            this.setState({\n                currentValue: '0',\n                formula: '0.',\n                evaluated: false\n            });\n        } else if (!c.includes('.') &&!c.includes('Limit')) {\n            this.setState({ evaluated: false });\n            if(c.length > 21) {\n                this.maxWarn();\n            } else if (endsWithOperator.test(f) || (c === '0' && f === '')) {\n                this.setState({\n                    currentValue: '0.',\n                    formula: f + '0.'\n                });\n            } else {\n                this.setState({\n                    currentValue: f.match(decimalOperator)[0] + '.',\n                    formula: f + '.'\n                })\n            }\n        }\n\n    }\n\n    evaluate() {\n        const { endsWithOperator, limitText } = Calculator\n        const { state : { currentValue: c, }} = this;\n\n        if (c.includes(limitText) === false) {\n            let { state: { formula : f }} = this;\n            while(endsWithOperator.test(f)) {\n                f = f.slice(0, -1);\n            }\n            f = f\n                .replace(/x/g, '*')\n                .replace(/‑/g, '-')\n                .replace('--', '+0+0+0+0+0+0+');\n            // eslint-disable-next-line no-eval\n            let ans = Math.round(1000000000000 * eval(f)) / 1000000000000;\n            this.setState({\n                currentValue: ans.toString(),\n                formula:\n                    f\n                        .replace(/\\*/g, '⋅')\n                        .replace(/-/g, '‑')\n                        .replace('+0+0+0+0+0+0+', '‑-')\n                        .replace(/([x/+])‑/, '$1-')\n                        .replace(/^‑/, '-') + '=' + ans,\n                previousValue: ans,\n                evaluated: true\n\n            })\n        }\n    }\n\n    render() {\n        const {id, test, className} = Calculator;\n        const {state: {currentValue, formula}, initialize, decimal, operators, handleDecimal, evaluate} = this;\n        return (\n            <div id={id} className={className}>\n                <h1 id=\"test\">{test}</h1>\n                <Formula formula={formula}/>\n                <Display currentValue={currentValue}/>\n                <Buttons\n                    initialize={initialize}\n                    decimal={decimal}\n                    operators={operators}\n                    handleDecimal={handleDecimal}\n                    evaluate={evaluate}\n                />\n                <Author/>\n            </div>\n        )\n    }\n}\n\nexport default Calculator ","import React from 'react';\n\nclass Formula extends React.Component {\n    #author = 'drGeo'\n    static className = 'formula';\n    static test = 'This is the Formula';\n    static formula;\n\n    get author() {\n        return this.#author;\n    }\n\n    render() {\n        const { className, test } = Formula;\n        return (\n            <div className={className}>\n                <h1 id=\"test\">{test}</h1>\n                {this.props.formula}\n            </div>\n        )\n    }\n}\n\nexport default Formula;","import './scss/Display.scss';\nimport React from 'react';\n\nclass Display extends React.Component {\n    static id = \"display\"\n    static className = \"screen\"\n    static test = \"This is the Display\"\n    static currentValue = 'unset';\n    static type = \"text\"\n\n    getCurrentValue() {\n        return this.props.currentValue;\n    }\n\n    render() {\n        const {id, className, test, type} = Display;\n        const { props: { currentValue }, getCurrentValue } = this;\n        return (\n            <div id={id} className={className}>\n                <h1 id=\"test\">{test}</h1>\n                <input type={type} onChange={getCurrentValue} value={currentValue} />\n                {currentValue}\n            </div>\n        )\n    }\n}\n\nexport default Display","import React from 'react';\nimport './scss/Buttons.scss';\n\nclass Buttons extends React.Component {\n    static className = 'buttons';\n    static test = 'This is the Buttons';\n\n    render() {\n        const {className, test} = Buttons;\n        return (\n            <div className={className}>\n                <h1 id=\"test\">{test}</h1>\n                <button id=\"seven\" onClick={this.props.decimal} value=\"7\">\n                    7\n                </button>\n                <button id=\"eight\" onClick={this.props.decimal} value=\"8\">\n                    8\n                </button>\n                <button id=\"nine\" onClick={this.props.decimal} value=\"9\">\n                    9\n                </button>\n                <button\n                    id=\"divide\"\n                    className={[className, 'operator'].join(\" \")}\n                    onClick={this.props.operators}\n                    value=\"/\"\n                >\n                    /\n                </button>\n                <button\n                    id=\"clear\"\n                    className={[className, 'operator'].join(\" \")}\n                    onClick={this.props.initialize}\n                    value=\"C\"\n                >\n                    C\n                </button>\n                <button id=\"four\" onClick={this.props.decimal} value=\"4\">\n                    4\n                </button>\n                <button id=\"five\" onClick={this.props.decimal} value=\"5\">\n                    5\n                </button>\n                <button id=\"six\" onClick={this.props.decimal} value=\"6\">\n                    6\n                </button>\n                <button\n                    id=\"multiply\"\n                    className={[className, 'operator'].join(\" \")}\n                    onClick={this.props.operators}\n                    value=\"x\"\n                >\n                    x\n                </button>\n                <button id=\"one\" onClick={this.props.decimal} value=\"1\">\n                    1\n                </button>\n                <button id=\"two\" onClick={this.props.decimal} value=\"2\">\n                    2\n                </button>\n                <button id=\"three\" onClick={this.props.decimal} value=\"3\">\n                    3\n                </button>\n                <button\n                    id=\"subtract\"\n                    className={[className, 'operator'].join(\" \")}\n                    onClick={this.props.operators}\n                    value=\"-\"\n                >\n                    -\n                </button>\n                <button id=\"zero\" onClick={this.props.decimal} value=\"0\">\n                    0\n                </button>\n                <button id=\"decimal\" onClick={this.props.handleDecimal} value=\".\">\n                    .\n                </button>\n                <button\n                    id=\"percent\"\n                    className={[className, 'operator'].join(\" \")}\n                    onClick={this.props.operators}\n                    value=\"%\"\n                >\n                    %\n                </button>\n                <button\n                    id=\"add\"\n                    className={[className, 'operator'].join(\" \")}\n                    onClick={this.props.operators}\n                    value=\"+\"\n                >\n                    +\n                </button>\n                <button\n                    id=\"equals\"\n                    className={[className, 'operator'].join(\" \")}\n                    onClick={this.props.evaluate}\n                    value=\"=\"\n                >\n                    =\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Buttons;","import React from 'react'\nimport './scss/Author.scss'\n\nclass Author extends React.Component {\n    static id = \"author\"\n    static className = \"footer\"\n    static alias = \"darasmussen\"\n    static tag = \"drGeo\"\n    static test = \"Created by\"\n    static href = `https://www.freecodecamp.org/${Author.alias}`\n    static target = \"_blank\"\n\n    render() {\n        const { id, className, test, href, target, tag } = Author;\n        return (\n            <div id={id} className={className}>\n                <h1 id=\"test\">{test}</h1>\n                <a href={href} target={target}>\n                    <code>{tag}</code>\n                </a>\n            </div>\n        )\n    }\n}\n\nexport default Author;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport ReactFCCtest from 'react-fcctest';\nimport Calculator from './Calculator/Calculator';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ReactFCCtest/>\n        <Calculator/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}